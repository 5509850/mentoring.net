using System;

namespace Module_02_Expressions_and_IQueryable_task_1
{
    /// <summary>
    /// Создайте класс-трансформатор на основе ExpressionVisitor, выполняющий следующие 2 вида преобразований дерева выражений:
    ///	Замену выражений вида<переменная> + 1 / <переменная> - 1 на операции инкремента и декремента
    ///	Замену параметров, входящих в lambda-выражение, на константы(в качестве параметров такого преобразования передавать:
    /// Исходное выражение
    ///   Список пар <имя параметра: значение для замены>
    ///Для контроля полученное дерево выводить в консоль или смотреть результат под отладчиком, использую ExpressionTree Visualizer, 
    ///а также компилировать его и вызывать полученный метод.
    ///Создайте класс-трансформатор на основе ExpressionVisitor, выполняющий следующие 2 вида преобразований дерева выражений:
    ///	Замену выражений вида<переменная> + 1 / <переменная> - 1 на операции инкремента и декремента
    ///	Замену параметров, входящих в lambda-выражение, на константы (в качестве параметров такого преобразования передавать:
    /// Исходное выражение
    ///   Список пар <имя параметра: значение для замены>
    //Для контроля полученное дерево выводить в консоль или смотреть результат под отладчиком, использую ExpressionTree Visualizer, 
    ///а также компилировать его и вызывать полученный метод.

    /// </summary>
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Task 1");
            Console.ReadKey();
        }
    }
}
